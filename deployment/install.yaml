apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: k8s-metadata-injector
  name: k8s-metadata-injector
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: k8s-metadata-injector
  namespace: kube-system
rules:
- apiGroups: [""]
  resources: ["persistentvolumes", "persistentvolumeclaims"]
  verbs: ["get","list","watch"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: k8s-metadata-injector
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-metadata-injector
subjects:
- kind: ServiceAccount
  name: k8s-metadata-injector
  namespace: kube-system
---
apiVersion: v1
kind: Service
metadata:
  name: k8s-metadata-injector
  namespace: kube-system
  labels:
    app: k8s-metadata-injector
spec:
  ports:
  - port: 443
    targetPort: 443
  selector:
    app: k8s-metadata-injector
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: k8s-metadata-injector
  namespace: kube-system
  labels:
    app: k8s-metadata-injector
webhooks:
  - name: serve.k8s-metadata-injector.io
    clientConfig:
      service:
        name: k8s-metadata-injector
        namespace: kube-system
        path: "/serve"
      caBundle: ${CA_BUNDLE}
    rules:
      - operations: [ "CREATE" ]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods", "services", "persistentvolumeclaims"]
      - operations: [ "UPDATE" ]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["services", "persistentvolumeclaims"]
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: k8s-metadata-injector
  namespace: kube-system
  labels:
    app: k8s-metadata-injector
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: k8s-metadata-injector
      annotations:
        iam.amazonaws.com/role: KubernetesEBSCreateTagsAccess
    spec:
      serviceAccountName: k8s-metadata-injector
      containers:
        - name: k8s-metadata-injector
          image: abdullahalmariah/k8s-metadata-injector:v1.0.0
          imagePullPolicy: Always
          args:
            - -metadataCfgFile=/etc/webhook/config/metadataconfig.yaml
            - -tlsCertFile=/etc/webhook/certs/cert.pem
            - -tlsKeyFile=/etc/webhook/certs/key.pem
            - -logtostderr=true
            - -v=2
          ports:
          - containerPort: 443
          volumeMounts:
            - name: certs
              mountPath: /etc/webhook/certs
              readOnly: true
            - name: config
              mountPath: /etc/webhook/config
      volumes:
        - name: certs
          secret:
            secretName: k8s-metadata-injector
        - name: config
          configMap:
            name: k8s-metadata-injector
